handler=Block #DC, types=[Ljava/lang/IllegalStateException;], range=[Block #C, Block #D, Block #F, Block #G, Block #E, Block #I, Block #H]
handler=Block #DS, types=[Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;], range=[Block #C, Block #D, Block #F, Block #G, Block #E, Block #I, Block #H]
handler=Block #EI, types=[Ljava/io/IOException;], range=[Block #S, Block #R]
handler=Block #EO, types=[Ljava/lang/RuntimeException;], range=[Block #V, Block #U]
handler=Block #EU, types=[Ljava/lang/RuntimeException;], range=[Block #Y, Block #X]
handler=Block #FA, types=[Ljava/io/IOException;], range=[Block #AB, Block #AA]
handler=Block #FG, types=[Ljava/io/IOException;], range=[Block #AE, Block #AD]
handler=Block #FM, types=[Ljava/io/IOException;], range=[Block #AH, Block #AG]
===#Block A(size=8, flags=1)===
   0. if ({1669913333 ^ 570551285} != 1099510016)
      goto BC
   1. lvar10 = {1196254623 ^ {1669913333 ^ 570551285}};
   2. if (lvar10 != 113530015)
      goto BB
   3. synth(lvar0 = lvar0);
   4. lvar18 = "A : var expect: -1";
   5. if (java.lang.Character.getNumericValue(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != -1)
      goto P
   6. lvar10 = {1526737688 ^ lvar10};
   7. if (lvar10 != 1573158791)
      goto BG
      -> ConditionalJump[IF_ICMPNE] #A -> #BG
      -> Immediate #A -> #B
      -> ConditionalJump[IF_ICMPNE] #A -> #BC
      -> ConditionalJump[IF_ICMPNE] #A -> #BB
      -> ConditionalJump[IF_ICMPNE] #A -> #P
===#Block BB(size=1, flags=0)===
   0. throw new java/io/IOException("Failed to match seed of value 113530015");
      <- ConditionalJump[IF_ICMPNE] #A -> #BB
===#Block BC(size=1, flags=0)===
   0. throw new java/io/IOException(new java/lang/StringBuilder("Failed to match entry seed of value 1099510016 of entry public: 1244090311 and private: 1099510016 and value: ").append({1669913333 ^ 570551285}).toString());
      <- ConditionalJump[IF_ICMPNE] #A -> #BC
===#Block B(size=2, flags=0)===
   0. lvar10 = {1400647847 ^ lvar10};
   1. if (lvar10 != 246959904)
      goto BF
      -> Immediate #B -> #C
      -> ConditionalJump[IF_ICMPNE] #B -> #BF
      <- Immediate #A -> #B
===#Block BF(size=1, flags=0)===
   0. throw new java/lang/RuntimeException(new java/lang/StringBuilder("B --> C # Failed to match seed of type Immediate and value 246959904 and got ").append(lvar10).toString());
      <- ConditionalJump[IF_ICMPNE] #B -> #BF
===#Block C(size=9, flags=0)===
   0. _consume(dev.skidfuscator.testclasses.opaque.OpaqueConditionClazz$AES.main(new java.lang.String[{246959904 ^ lvar10}]));
   1. lvar142 = "[Constant] 0 -> 246959904 predicate=246959904";
   2. if (dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.data[{246959904 ^ lvar10}] != {246959904 ^ lvar10})
      goto CS
   3. lvar146 = "[Constant] 0 -> 246959904 predicate=246959904";
   4. lvar144 = "[Constant] 0 -> 246959904 predicate=246959904";
   5. lvar22 = "C : var expect: 1307126627";
   6. if (java.lang.Math.subtractExact(1517175641, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1307126627)
      goto AL
   7. lvar10 = {194004768 ^ lvar10};
   8. if (lvar10 != 86509568)
      goto BH
      -> ConditionalJump[IF_ICMPNE] #C -> #CS
      -> ConditionalJump[IF_ICMPNE] #C -> #AL
      -> TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      -> Immediate #C -> #D
      -> TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      -> ConditionalJump[IF_ICMPNE] #C -> #BH
      <- Immediate #B -> #C
===#Block BH(size=1, flags=0)===
   0. throw new java/lang/RuntimeException(new java/lang/StringBuilder("C --> D # Failed to match seed of type Immediate and value 86509568 and got ").append(lvar10).toString());
      <- ConditionalJump[IF_ICMPNE] #C -> #BH
===#Block D(size=5, flags=0)===
   0. svar12 = {dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.data[{86509569 ^ lvar10}] ^ lvar10};
   1. lvar102 = "[Constant] 1 -> 86509569 predicate=86509568";
   2. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(svar12)) {
      case 81101480:
      	 goto	#CW
      default:
      	 goto	#CZ
   }
   3. lvar56 = "D : var expect: 1717058136";
   4. if (java.lang.Math.max(1717058136, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1717058136)
      goto AU
      -> DefaultSwitch #D -> #CZ
      -> TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      -> Switch[81101480] #D -> #CW
      -> ConditionalJump[IF_ICMPNE] #D -> #AU
      -> TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      <- Immediate #C -> #D
===#Block CW(size=3, flags=10100)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) {
      case 81101480:
      	 goto	#CX
      case 436382735:
      	 goto	#CW
      case 1361632897:
      	 goto	#AK
      case 1930659738:
      	 goto	#G
      default:
      	 goto	#AK
   }
   1. lvar202 = "D -> G : c-loc - switch : 782781551";
   2. if (lvar10 != 782781551)
      goto CY
      -> Switch[1930659738] #CW -> #G
      -> Switch[81101480] #CW -> #CX
      -> DefaultSwitch #CW -> #AK
      -> Immediate #CW -> #CX
      -> Switch[436382735] #CW -> #CW
      -> Switch[1361632897] #CW -> #AK
      -> ConditionalJump[IF_ICMPNE] #CW -> #CY
      <- Switch[436382735] #CW -> #CW
      <- Switch[81101480] #D -> #CW
===#Block CY(size=1, flags=0)===
   0. throw new java/io/IOException("CW --> G # Failed to match seed of type Switch Entry [81101480, og:G, redirected: CW) and value 782781551");
      <- ConditionalJump[IF_ICMPNE] #CW -> #CY
===#Block CX(size=2, flags=100)===
   0. lvar10 = {729826415 ^ lvar10};
   1. goto G
      -> UnconditionalJump[GOTO] #CX -> #G
      <- Switch[81101480] #CW -> #CX
      <- Immediate #CW -> #CX
===#Block G(size=6, flags=0)===
   0. lvar7 = {782781548 ^ lvar10};
   1. lvar124 = "[Constant] 3 -> 782781548 predicate=782781551";
   2. lvar74 = "G : var expect: 174471872";
   3. if (java.lang.Math.incrementExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 174471872)
      goto AP
   4. lvar180 = "G -> AE : c-loc - uncond : 1583902757";
   5. goto BW
      -> TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      -> ConditionalJump[IF_ICMPNE] #G -> #AP
      -> UnconditionalJump[GOTO] #G -> #BW
      -> TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      <- Switch[1930659738] #CW -> #G
      <- UnconditionalJump[GOTO] #CX -> #G
===#Block BW(size=3, flags=10100)===
   0. lvar10 = {1891646538 ^ lvar10};
   1. if (lvar10 != 1583902757)
      goto BX
   2. goto AE
      -> ConditionalJump[IF_ICMPNE] #BW -> #BX
      -> UnconditionalJump[GOTO] #BW -> #AE
      <- UnconditionalJump[GOTO] #G -> #BW
===#Block AE(size=4, flags=0)===
   0. if (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10) == 116000559)
      goto AD
   1. throw nullconst;
   2. lvar52 = "AE : var expect: 0";
   3. if (java.lang.Math.floorDiv(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 740656974) != 0)
      goto AP
      -> ConditionalJump[IFNE] #AE -> #AP
      -> TryCatch range: [AE...AD] -> FG ([Ljava/io/IOException;])
      -> ConditionalJump[IF_ICMPEQ] #AE -> #AD
      <- UnconditionalJump[GOTO] #BW -> #AE
===#Block AD(size=3, flags=0)===
   0. throw new java/io/IOException();
   1. lvar64 = "AD : var expect: 672834169";
   2. if (java.lang.StrictMath.floorMod(6909346245057239445L, 1346717428) != 672834169)
      goto AJ
      -> TryCatch range: [AE...AD] -> FG ([Ljava/io/IOException;])
      -> ConditionalJump[IF_ICMPNE] #AD -> #AJ
      <- ConditionalJump[IF_ICMPEQ] #AE -> #AD
===#Block FG(size=1, flags=0)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.kdjdykfpmferaltc(lvar10)) {
      case -2042935784:
      	 goto	#FJ
      case -213679830:
      	 goto	#FH
      default:
      	 goto	#FL
   }
      -> DefaultSwitch #FG -> #FL
      -> Switch[-213679830] #FG -> #FH
      -> Switch[-2042935784] #FG -> #FJ
      <- TryCatch range: [AE...AD] -> FG ([Ljava/io/IOException;])
      <- TryCatch range: [AE...AD] -> FG ([Ljava/io/IOException;])
===#Block FJ(size=3, flags=10100)===
   0. lvar10 = {1794185766 ^ lvar10};
   1. if (lvar10 != 2050388709)
      goto FK
   2. goto AF
      -> ConditionalJump[IF_ICMPNE] #FJ -> #FK
      -> UnconditionalJump[GOTO] #FJ -> #AF
      <- Switch[-2042935784] #FG -> #FJ
===#Block FK(size=1, flags=0)===
   0. throw new java/io/IOException("FJ --> AF # Failed to match seed of type Exception Range [Ljava/io/IOException;] and value 2050388709");
      <- ConditionalJump[IF_ICMPNE] #FJ -> #FK
===#Block FH(size=3, flags=10100)===
   0. lvar10 = {610140864 ^ lvar10};
   1. if (lvar10 != 2050388709)
      goto FI
   2. goto AF
      -> UnconditionalJump[GOTO] #FH -> #AF
      -> ConditionalJump[IF_ICMPNE] #FH -> #FI
      <- Switch[-213679830] #FG -> #FH
===#Block FI(size=1, flags=0)===
   0. throw new java/io/IOException("FH --> AF # Failed to match seed of type Exception Range [Ljava/io/IOException;] and value 2050388709");
      <- ConditionalJump[IF_ICMPNE] #FH -> #FI
===#Block AF(size=5, flags=0)===
   0. _consume(catch());
   1. lvar46 = "AF : var expect: 1";
   2. if (java.lang.Math.floorDiv(304399280, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1)
      goto AJ
   3. lvar190 = "AF -> H : c-loc - uncond : 1222503257";
   4. goto CH
      -> ConditionalJump[IF_ICMPNE] #AF -> #AJ
      -> UnconditionalJump[GOTO] #AF -> #CH
      <- UnconditionalJump[GOTO] #FH -> #AF
      <- UnconditionalJump[GOTO] #FJ -> #AF
===#Block CH(size=2, flags=10100)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) {
      case 214500525:
      	 goto	#CI
      case 797469252:
      	 goto	#CH
      case 1556428803:
      	 goto	#H
      case 1956248668:
      	 goto	#AO
      default:
      	 goto	#AO
   }
   1. if (lvar10 != 1222503257)
      goto CJ
      -> Switch[797469252] #CH -> #CH
      -> Switch[1556428803] #CH -> #H
      -> Switch[214500525] #CH -> #CI
      -> ConditionalJump[IF_ICMPNE] #CH -> #CJ
      -> Immediate #CH -> #CI
      -> DefaultSwitch #CH -> #AO
      -> Switch[1956248668] #CH -> #AO
      <- Switch[797469252] #CH -> #CH
      <- UnconditionalJump[GOTO] #AF -> #CH
===#Block CJ(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("CH --> H # Failed to match seed of type Unconditional and value 1222503257");
      <- ConditionalJump[IF_ICMPNE] #CH -> #CJ
===#Block CI(size=2, flags=100)===
   0. lvar10 = {854301116 ^ lvar10};
   1. goto H
      -> UnconditionalJump[GOTO] #CI -> #H
      <- Switch[214500525] #CH -> #CI
      <- Immediate #CH -> #CI
===#Block FL(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("Error in hash");
      <- DefaultSwitch #FG -> #FL
===#Block BX(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("BW --> AE # Failed to match seed of type Unconditional and value 1583902757");
      <- ConditionalJump[IF_ICMPNE] #BW -> #BX
===#Block CZ(size=3, flags=10100)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) {
      case 81101480:
      	 goto	#DA
      case 434280524:
      	 goto	#E
      case 1076723261:
      	 goto	#AX
      case 2020439650:
      	 goto	#CZ
      default:
      	 goto	#AX
   }
   1. lvar204 = "D -> E : c-loc - switch : 1380444821";
   2. if (lvar10 != 1380444821)
      goto DB
      -> Switch[434280524] #CZ -> #E
      -> DefaultSwitch #CZ -> #AX
      -> Switch[81101480] #CZ -> #DA
      -> Switch[1076723261] #CZ -> #AX
      -> ConditionalJump[IF_ICMPNE] #CZ -> #DB
      -> Immediate #CZ -> #DA
      -> Switch[2020439650] #CZ -> #CZ
      <- DefaultSwitch #D -> #CZ
      <- Switch[2020439650] #CZ -> #CZ
===#Block DB(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("CZ --> E # Failed to match seed of type Switch Default and value 1380444821");
      <- ConditionalJump[IF_ICMPNE] #CZ -> #DB
===#Block DA(size=2, flags=100)===
   0. lvar10 = {1466950293 ^ lvar10};
   1. goto E
      -> UnconditionalJump[GOTO] #DA -> #E
      <- Switch[81101480] #CZ -> #DA
      <- Immediate #CZ -> #DA
===#Block E(size=6, flags=0)===
   0. lvar7 = {-1380444818 ^ lvar10};
   1. lvar104 = "[Constant] -5 -> -1380444818 predicate=1380444821";
   2. lvar58 = "E : var expect: 4";
   3. if (java.lang.Integer.numberOfLeadingZeros(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 4)
      goto AQ
   4. lvar178 = "E -> AB : c-loc - uncond : 1308503856";
   5. goto BT
      -> ConditionalJump[IF_ICMPNE] #E -> #AQ
      -> UnconditionalJump[GOTO] #E -> #BT
      -> TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      -> TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      <- Switch[434280524] #CZ -> #E
      <- UnconditionalJump[GOTO] #DA -> #E
===#Block BT(size=2, flags=10100)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) {
      case 258671815:
      	 goto	#BU
      case 652348198:
      	 goto	#AB
      case 1109282923:
      	 goto	#BT
      case 1824729686:
      	 goto	#AL
      default:
      	 goto	#AL
   }
   1. if (lvar10 != 1308503856)
      goto BV
      -> DefaultSwitch #BT -> #AL
      -> Switch[1824729686] #BT -> #AL
      -> Switch[652348198] #BT -> #AB
      -> Switch[258671815] #BT -> #BU
      -> Switch[1109282923] #BT -> #BT
      -> ConditionalJump[IF_ICMPNE] #BT -> #BV
      -> Immediate #BT -> #BU
      <- UnconditionalJump[GOTO] #E -> #BT
      <- Switch[1109282923] #BT -> #BT
===#Block BV(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("BT --> AB # Failed to match seed of type Unconditional and value 1308503856");
      <- ConditionalJump[IF_ICMPNE] #BT -> #BV
===#Block BU(size=2, flags=100)===
   0. lvar10 = {532268453 ^ lvar10};
   1. goto AB
      -> UnconditionalJump[GOTO] #BU -> #AB
      <- Switch[258671815] #BT -> #BU
      <- Immediate #BT -> #BU
===#Block AB(size=4, flags=0)===
   0. if (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10) == 119289491)
      goto AA
   1. throw nullconst;
   2. lvar72 = "AB : var expect: 119289491";
   3. if (java.lang.Math.absExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 119289491)
      goto AZ
      -> ConditionalJump[IF_ICMPNE] #AB -> #AZ
      -> ConditionalJump[IF_ICMPEQ] #AB -> #AA
      -> TryCatch range: [AB...AA] -> FA ([Ljava/io/IOException;])
      <- Switch[652348198] #BT -> #AB
      <- UnconditionalJump[GOTO] #BU -> #AB
===#Block AA(size=3, flags=0)===
   0. throw new java/io/IOException();
   1. lvar24 = "AA : var expect: -2115371073";
   2. if (java.lang.Integer.sum(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 2092181537) != -2115371073)
      goto AJ
      -> ConditionalJump[IF_ICMPNE] #AA -> #AJ
      -> TryCatch range: [AB...AA] -> FA ([Ljava/io/IOException;])
      <- ConditionalJump[IF_ICMPEQ] #AB -> #AA
===#Block FA(size=1, flags=0)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.kdjdykfpmferaltc(lvar10)) {
      case 499515553:
      	 goto	#FD
      case 1878096258:
      	 goto	#FB
      default:
      	 goto	#FF
   }
      -> DefaultSwitch #FA -> #FF
      -> Switch[1878096258] #FA -> #FB
      -> Switch[499515553] #FA -> #FD
      <- TryCatch range: [AB...AA] -> FA ([Ljava/io/IOException;])
      <- TryCatch range: [AB...AA] -> FA ([Ljava/io/IOException;])
===#Block FD(size=3, flags=10100)===
   0. lvar10 = {1469840107 ^ lvar10};
   1. if (lvar10 != 1948465919)
      goto FE
   2. goto AC
      -> UnconditionalJump[GOTO] #FD -> #AC
      -> ConditionalJump[IF_ICMPNE] #FD -> #FE
      <- Switch[499515553] #FA -> #FD
===#Block FE(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("FD --> AC # Failed to match seed of type Exception Range [Ljava/io/IOException;] and value 1948465919");
      <- ConditionalJump[IF_ICMPNE] #FD -> #FE
===#Block FB(size=3, flags=10100)===
   0. lvar10 = {970790351 ^ lvar10};
   1. if (lvar10 != 1948465919)
      goto FC
   2. goto AC
      -> UnconditionalJump[GOTO] #FB -> #AC
      -> ConditionalJump[IF_ICMPNE] #FB -> #FC
      <- Switch[1878096258] #FA -> #FB
===#Block FC(size=1, flags=0)===
   0. throw new java/io/IOException("FB --> AC # Failed to match seed of type Exception Range [Ljava/io/IOException;] and value 1948465919");
      <- ConditionalJump[IF_ICMPNE] #FB -> #FC
===#Block AC(size=5, flags=0)===
   0. _consume(catch());
   1. lvar50 = "AC : var expect: 0";
   2. if (java.lang.Integer.numberOfTrailingZeros(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 0)
      goto AS
   3. lvar176 = "AC -> H : c-loc - uncond : 1222503257";
   4. goto BQ
      -> ConditionalJump[IFNE] #AC -> #AS
      -> UnconditionalJump[GOTO] #AC -> #BQ
      <- UnconditionalJump[GOTO] #FD -> #AC
      <- UnconditionalJump[GOTO] #FB -> #AC
===#Block BQ(size=2, flags=10100)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) {
      case 17053293:
      	 goto	#BR
      case 998948756:
      	 goto	#BQ
      case 1806318142:
      	 goto	#AQ
      case 2103995655:
      	 goto	#H
      default:
      	 goto	#AQ
   }
   1. if (lvar10 != 1222503257)
      goto BS
      -> Switch[998948756] #BQ -> #BQ
      -> Switch[2103995655] #BQ -> #H
      -> Switch[17053293] #BQ -> #BR
      -> Immediate #BQ -> #BR
      -> Switch[1806318142] #BQ -> #AQ
      -> DefaultSwitch #BQ -> #AQ
      -> ConditionalJump[IF_ICMPNE] #BQ -> #BS
      <- Switch[998948756] #BQ -> #BQ
      <- UnconditionalJump[GOTO] #AC -> #BQ
===#Block BS(size=1, flags=0)===
   0. throw new java/io/IOException("BQ --> H # Failed to match seed of type Unconditional and value 1222503257");
      <- ConditionalJump[IF_ICMPNE] #BQ -> #BS
===#Block BR(size=2, flags=100)===
   0. lvar10 = {1023332774 ^ lvar10};
   1. goto H
      -> UnconditionalJump[GOTO] #BR -> #H
      <- Switch[17053293] #BQ -> #BR
      <- Immediate #BQ -> #BR
===#Block H(size=6, flags=0)===
   0. _consume(lvar0.self(lvar7, 1388402073));
   1. lvar2 = new java.lang.IllegalArgumentException;
   2. _consume(lvar2.<init>(dynamic_invoke<java.lang.String>(java.lang.invoke.StringConcatFactory.makeConcatWithConstants("Failed test! Stage: ", lvar7))));
   3. throw lvar2;
   4. lvar54 = "H : var expect: -221101857";
   5. if (java.lang.StrictMath.negateExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != -221101857)
      goto AT
      -> TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      -> ConditionalJump[IF_ICMPNE] #H -> #AT
      -> TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      <- Switch[1556428803] #CH -> #H
      <- UnconditionalJump[GOTO] #CI -> #H
      <- Switch[2103995655] #BQ -> #H
      <- Switch[665344099] #CA -> #H
      <- UnconditionalJump[GOTO] #CB -> #H
      <- UnconditionalJump[GOTO] #BR -> #H
===#Block AS(size=6, flags=0)===
   0. throw new java/lang/IllegalAccessException("Failed to proper vm");
   1. if (java.lang.Integer.numberOfTrailingZeros(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 0)
      goto AS
   2. if (java.lang.Integer.numberOfTrailingZeros(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {2126190611 ^ lvar10})
      goto AS
   3. lvar100 = "[Constant] 1533136363 -> 2126190611 predicate=635098616";
   4. _consume({1372789340 ^ lvar10});
   5. throw new java/lang/IllegalAccessException("double");
      -> ConditionalJump[IFNE] #AS -> #AS
      <- ConditionalJump[IFNE] #AC -> #AS
      <- ConditionalJump[IFNE] #AS -> #AS
===#Block FF(size=1, flags=0)===
   0. throw new java/io/IOException("Error in hash");
      <- DefaultSwitch #FA -> #FF
===#Block AZ(size=6, flags=0)===
   0. throw new java/lang/IllegalAccessException("Failed to proper vm");
   1. if (java.lang.Math.absExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 119289491)
      goto AZ
   2. if (java.lang.Math.absExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1415843332 ^ lvar10})
      goto AZ
   3. lvar134 = "[Constant] 240830319 -> 1415843332 predicate=1514064235";
   4. _consume({213937309 ^ lvar10});
   5. throw new java/lang/RuntimeException("double");
      -> ConditionalJump[IF_ICMPNE] #AZ -> #AZ
      <- ConditionalJump[IF_ICMPNE] #AB -> #AZ
      <- ConditionalJump[IF_ICMPNE] #AZ -> #AZ
===#Block CS(size=4, flags=10100)===
   0. lvar10 = {48794680 ^ lvar10};
   1. lvar198 = "C -> O : c-loc - cond : 206619416";
   2. if (lvar10 != 206619416)
      goto CT
   3. goto O
      -> UnconditionalJump[GOTO] #CS -> #O
      -> ConditionalJump[IF_ICMPNE] #CS -> #CT
      <- ConditionalJump[IF_ICMPNE] #C -> #CS
===#Block CT(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("CS --> O # Failed to match seed of type Conditional and value 206619416");
      <- ConditionalJump[IF_ICMPNE] #CS -> #CT
===#Block O(size=5, flags=0)===
   0. if (java.lang.Integer.highestOneBit(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) == 67108864)
      goto CU
   1. lvar78 = "O : var expect: 0";
   2. if (java.lang.Integer.divideUnsigned(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 717799781) != 0)
      goto AT
   3. lvar192 = "O -> AH : c-loc - uncond : 151985521";
   4. goto CK
      -> ConditionalJump[IF_ICMPEQ] #O -> #CU
      -> UnconditionalJump[GOTO] #O -> #CK
      -> ConditionalJump[IFNE] #O -> #AT
      <- UnconditionalJump[GOTO] #CS -> #O
===#Block AT(size=11, flags=0)===
   0. throw new java/lang/RuntimeException("Failed to proper vm");
   1. if (java.lang.Integer.divideUnsigned(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 717799781) != 0)
      goto AT
   2. if (java.lang.Integer.divideUnsigned(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 717799781) != {1875980090 ^ lvar10})
      goto AT
   3. lvar118 = "[Constant] 1565228851 -> 1875980090 predicate=848973833";
   4. _consume({1279866343 ^ lvar10});
   5. throw new java/lang/IllegalAccessException("Failed to proper vm");
   6. if (java.lang.StrictMath.negateExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != -221101857)
      goto AT
   7. if (java.lang.StrictMath.negateExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1435161180 ^ lvar10})
      goto AT
   8. lvar120 = "[Constant] 1729135189 -> 1435161180 predicate=848973833";
   9. _consume({1670266440 ^ lvar10});
   10. throw new java/lang/IllegalAccessException("double");
      -> ConditionalJump[IFNE] #AT -> #AT
      <- ConditionalJump[IFNE] #AT -> #AT
      <- ConditionalJump[IFNE] #O -> #AT
      <- ConditionalJump[IF_ICMPNE] #H -> #AT
===#Block CK(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 90168937);
   1. if (lvar10 != 151985521)
      goto CL
   2. goto AH
      -> UnconditionalJump[GOTO] #CK -> #AH
      -> ConditionalJump[IF_ICMPNE] #CK -> #CL
      <- UnconditionalJump[GOTO] #O -> #CK
===#Block CL(size=1, flags=0)===
   0. throw new java/io/IOException("CK --> AH # Failed to match seed of type Unconditional and value 151985521");
      <- ConditionalJump[IF_ICMPNE] #CK -> #CL
===#Block AH(size=4, flags=0)===
   0. if (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10) == 26034181)
      goto AG
   1. throw nullconst;
   2. lvar28 = "AH : var expect: 26034181";
   3. if (java.lang.Math.absExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 26034181)
      goto AN
      -> TryCatch range: [AH...AG] -> FM ([Ljava/io/IOException;])
      -> ConditionalJump[IF_ICMPNE] #AH -> #AN
      -> ConditionalJump[IF_ICMPEQ] #AH -> #AG
      <- UnconditionalJump[GOTO] #CK -> #AH
===#Block AG(size=3, flags=0)===
   0. throw new java/io/IOException();
   1. lvar66 = "AG : var expect: 96268669";
   2. if (java.lang.Character.toLowerCase(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 96268669)
      goto AX
      -> TryCatch range: [AH...AG] -> FM ([Ljava/io/IOException;])
      -> ConditionalJump[IF_ICMPNE] #AG -> #AX
      <- ConditionalJump[IF_ICMPEQ] #AH -> #AG
===#Block AX(size=6, flags=0)===
   0. throw new java/lang/IllegalAccessException("Failed to proper vm");
   1. if (java.lang.Character.toLowerCase(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 96268669)
      goto AX
   2. if (java.lang.Character.toLowerCase(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1217868518 ^ lvar10})
      goto AX
   3. lvar122 = "[Constant] 800241795 -> 1217868518 predicate=1730513509";
   4. _consume({2124593970 ^ lvar10});
   5. throw new java/lang/IllegalAccessException("double");
      -> ConditionalJump[IF_ICMPNE] #AX -> #AX
      <- ConditionalJump[IF_ICMPNE] #AX -> #AX
      <- DefaultSwitch #CZ -> #AX
      <- Switch[1076723261] #CZ -> #AX
      <- ConditionalJump[IF_ICMPNE] #AG -> #AX
===#Block FM(size=1, flags=0)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.kdjdykfpmferaltc(lvar10)) {
      case 813043267:
      	 goto	#FP
      case 1215884168:
      	 goto	#FN
      default:
      	 goto	#FR
   }
      -> DefaultSwitch #FM -> #FR
      -> Switch[813043267] #FM -> #FP
      -> Switch[1215884168] #FM -> #FN
      <- TryCatch range: [AH...AG] -> FM ([Ljava/io/IOException;])
      <- TryCatch range: [AH...AG] -> FM ([Ljava/io/IOException;])
===#Block FN(size=3, flags=10100)===
   0. lvar10 = {217279881 ^ lvar10};
   1. if (lvar10 != 100430072)
      goto FO
   2. goto AI
      -> ConditionalJump[IF_ICMPNE] #FN -> #FO
      -> UnconditionalJump[GOTO] #FN -> #AI
      <- Switch[1215884168] #FM -> #FN
===#Block FO(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("FN --> AI # Failed to match seed of type Exception Range [Ljava/io/IOException;] and value 100430072");
      <- ConditionalJump[IF_ICMPNE] #FN -> #FO
===#Block FP(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1676849456);
   1. if (lvar10 != 100430072)
      goto FQ
   2. goto AI
      -> ConditionalJump[IF_ICMPNE] #FP -> #FQ
      -> UnconditionalJump[GOTO] #FP -> #AI
      <- Switch[813043267] #FM -> #FP
===#Block AI(size=5, flags=0)===
   0. _consume(catch());
   1. lvar40 = "AI : var expect: 0";
   2. if (java.lang.Character.getType(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 0)
      goto AQ
   3. lvar174 = "AI -> P : c-loc - uncond : 825727288";
   4. goto BN
      -> UnconditionalJump[GOTO] #AI -> #BN
      -> ConditionalJump[IFNE] #AI -> #AQ
      <- UnconditionalJump[GOTO] #FN -> #AI
      <- UnconditionalJump[GOTO] #FP -> #AI
===#Block AQ(size=11, flags=0)===
   0. throw new java/io/IOException("Failed to proper vm");
   1. if (java.lang.Integer.numberOfLeadingZeros(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 4)
      goto AQ
   2. if (java.lang.Integer.numberOfLeadingZeros(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1721181494 ^ lvar10})
      goto AQ
   3. lvar168 = "[Constant] 1091931915 -> 1721181494 predicate=662874685";
   4. _consume({1424722734 ^ lvar10});
   5. throw new java/lang/IllegalAccessException("Failed to proper vm");
   6. if (java.lang.Character.getType(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 0)
      goto AQ
   7. if (java.lang.Character.getType(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1208442658 ^ lvar10})
      goto AQ
   8. lvar166 = "[Constant] 1871050015 -> 1208442658 predicate=662874685";
   9. _consume({144412276 ^ lvar10});
   10. throw new java/lang/RuntimeException("double");
      -> ConditionalJump[IF_ICMPNE] #AQ -> #AQ
      <- ConditionalJump[IF_ICMPNE] #E -> #AQ
      <- ConditionalJump[IFNE] #AI -> #AQ
      <- ConditionalJump[IF_ICMPNE] #AQ -> #AQ
      <- Switch[1806318142] #BQ -> #AQ
      <- DefaultSwitch #BQ -> #AQ
===#Block BN(size=2, flags=10100)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) {
      case 94153748:
      	 goto	#BO
      case 198633181:
      	 goto	#AU
      case 262085016:
      	 goto	#P
      case 2071517964:
      	 goto	#BN
      default:
      	 goto	#AU
   }
   1. if (lvar10 != 825727288)
      goto BP
      -> Switch[262085016] #BN -> #P
      -> Switch[2071517964] #BN -> #BN
      -> Immediate #BN -> #BO
      -> ConditionalJump[IF_ICMPNE] #BN -> #BP
      -> DefaultSwitch #BN -> #AU
      -> Switch[94153748] #BN -> #BO
      -> Switch[198633181] #BN -> #AU
      <- UnconditionalJump[GOTO] #AI -> #BN
      <- Switch[2071517964] #BN -> #BN
===#Block AU(size=6, flags=0)===
   0. throw new java/io/IOException("Failed to proper vm");
   1. if (java.lang.Math.max(1717058136, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1717058136)
      goto AU
   2. if (java.lang.Math.max(1717058136, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {135912782 ^ lvar10})
      goto AU
   3. lvar82 = "[Constant] 224589921 -> 135912782 predicate=91956527";
   4. _consume({1938054222 ^ lvar10});
   5. throw new java/lang/IllegalAccessException("double");
      -> ConditionalJump[IF_ICMPNE] #AU -> #AU
      <- ConditionalJump[IF_ICMPNE] #D -> #AU
      <- ConditionalJump[IF_ICMPNE] #AU -> #AU
      <- DefaultSwitch #BN -> #AU
      <- Switch[198633181] #BN -> #AU
===#Block BP(size=1, flags=0)===
   0. throw new java/io/IOException("BN --> P # Failed to match seed of type Unconditional and value 825727288");
      <- ConditionalJump[IF_ICMPNE] #BN -> #BP
===#Block BO(size=2, flags=100)===
   0. lvar10 = {885778880 ^ lvar10};
   1. goto P
      -> UnconditionalJump[GOTO] #BO -> #P
      <- Immediate #BN -> #BO
      <- Switch[94153748] #BN -> #BO
===#Block FQ(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("FP --> AI # Failed to match seed of type Exception Range [Ljava/io/IOException;] and value 100430072");
      <- ConditionalJump[IF_ICMPNE] #FP -> #FQ
===#Block FR(size=1, flags=0)===
   0. throw new java/io/IOException("Error in hash");
      <- DefaultSwitch #FM -> #FR
===#Block CU(size=4, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1664212590);
   1. lvar200 = "O -> I : c-loc - cond : 1868635510";
   2. if (lvar10 != 1868635510)
      goto CV
   3. goto I
      -> UnconditionalJump[GOTO] #CU -> #I
      -> ConditionalJump[IF_ICMPNE] #CU -> #CV
      <- ConditionalJump[IF_ICMPEQ] #O -> #CU
===#Block CV(size=1, flags=0)===
   0. throw new java/io/IOException("CU --> I # Failed to match seed of type Conditional and value 1868635510");
      <- ConditionalJump[IF_ICMPNE] #CU -> #CV
===#Block I(size=6, flags=0)===
   0. lvar5 = new java.lang.IllegalArgumentException;
   1. _consume(lvar5.<init>(dynamic_invoke<java.lang.String>(java.lang.invoke.StringConcatFactory.makeConcatWithConstants("Failed test! Stage: ", {1868635508 ^ lvar10}))));
   2. lvar148 = "[Constant] 2 -> 1868635508 predicate=1868635510";
   3. throw lvar5;
   4. lvar26 = "I : var expect: 130827894";
   5. if (java.lang.Math.incrementExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 130827894)
      goto AM
      -> TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      -> ConditionalJump[IF_ICMPNE] #I -> #AM
      -> TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      <- UnconditionalJump[GOTO] #CU -> #I
===#Block DS(size=1, flags=0)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.kdjdykfpmferaltc(lvar10)) {
      case -1841343318:
      	 goto	#EB
      case 692076544:
      	 goto	#DV
      case 1185675456:
      	 goto	#DX
      case 1190091466:
      	 goto	#EF
      case 1967285113:
      	 goto	#DZ
      case 1975679232:
      	 goto	#DT
      case 2064182195:
      	 goto	#ED
      default:
      	 goto	#EH
   }
      -> Switch[1975679232] #DS -> #DT
      -> Switch[692076544] #DS -> #DV
      -> Switch[1185675456] #DS -> #DX
      -> Switch[2064182195] #DS -> #ED
      -> Switch[1190091466] #DS -> #EF
      -> Switch[-1841343318] #DS -> #EB
      -> Switch[1967285113] #DS -> #DZ
      -> DefaultSwitch #DS -> #EH
      <- TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      <- TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      <- TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      <- TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      <- TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      <- TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
      <- TryCatch range: [C...H] -> DS ([Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;])
===#Block EH(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("Error in hash");
      <- DefaultSwitch #DS -> #EH
===#Block DZ(size=3, flags=10100)===
   0. lvar10 = {1333204193 ^ lvar10};
   1. if (lvar10 != 1642027150)
      goto EA
   2. goto J
      -> ConditionalJump[IF_ICMPNE] #DZ -> #EA
      -> UnconditionalJump[GOTO] #DZ -> #J
      <- Switch[1967285113] #DS -> #DZ
===#Block EA(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("DZ --> J # Failed to match seed of type Exception Range [Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;] and value 1642027150");
      <- ConditionalJump[IF_ICMPNE] #DZ -> #EA
===#Block EB(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 865645083);
   1. if (lvar10 != 1642027150)
      goto EC
   2. goto J
      -> UnconditionalJump[GOTO] #EB -> #J
      -> ConditionalJump[IF_ICMPNE] #EB -> #EC
      <- Switch[-1841343318] #DS -> #EB
===#Block EC(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("EB --> J # Failed to match seed of type Exception Range [Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;] and value 1642027150");
      <- ConditionalJump[IF_ICMPNE] #EB -> #EC
===#Block EF(size=3, flags=10100)===
   0. lvar10 = {688042967 ^ lvar10};
   1. if (lvar10 != 1642027150)
      goto EG
   2. goto J
      -> ConditionalJump[IF_ICMPNE] #EF -> #EG
      -> UnconditionalJump[GOTO] #EF -> #J
      <- Switch[1190091466] #DS -> #EF
===#Block EG(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("EF --> J # Failed to match seed of type Exception Range [Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;] and value 1642027150");
      <- ConditionalJump[IF_ICMPNE] #EF -> #EG
===#Block ED(size=3, flags=10100)===
   0. lvar10 = {247350776 ^ lvar10};
   1. if (lvar10 != 1642027150)
      goto EE
   2. goto J
      -> ConditionalJump[IF_ICMPNE] #ED -> #EE
      -> UnconditionalJump[GOTO] #ED -> #J
      <- Switch[2064182195] #DS -> #ED
===#Block EE(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("ED --> J # Failed to match seed of type Exception Range [Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;] and value 1642027150");
      <- ConditionalJump[IF_ICMPNE] #ED -> #EE
===#Block DX(size=3, flags=10100)===
   0. lvar10 = {1762273174 ^ lvar10};
   1. if (lvar10 != 1642027150)
      goto DY
   2. goto J
      -> ConditionalJump[IF_ICMPNE] #DX -> #DY
      -> UnconditionalJump[GOTO] #DX -> #J
      <- Switch[1185675456] #DS -> #DX
===#Block DY(size=1, flags=0)===
   0. throw new java/io/IOException("DX --> J # Failed to match seed of type Exception Range [Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;] and value 1642027150");
      <- ConditionalJump[IF_ICMPNE] #DX -> #DY
===#Block DV(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1693929614);
   1. if (lvar10 != 1642027150)
      goto DW
   2. goto J
      -> ConditionalJump[IF_ICMPNE] #DV -> #DW
      -> UnconditionalJump[GOTO] #DV -> #J
      <- Switch[692076544] #DS -> #DV
===#Block DW(size=1, flags=0)===
   0. throw new java/io/IOException("DV --> J # Failed to match seed of type Exception Range [Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;] and value 1642027150");
      <- ConditionalJump[IF_ICMPNE] #DV -> #DW
===#Block DT(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1869027246);
   1. if (lvar10 != 1642027150)
      goto DU
   2. goto J
      -> ConditionalJump[IF_ICMPNE] #DT -> #DU
      -> UnconditionalJump[GOTO] #DT -> #J
      <- Switch[1975679232] #DS -> #DT
===#Block J(size=8, flags=0)===
   0. lvar1 = catch();
   1. _consume(lvar1.printStackTrace());
   2. lvar6 = {-1642027151 ^ lvar10};
   3. lvar84 = "[Constant] -1 -> -1642027151 predicate=1642027150";
   4. lvar36 = "J : var expect: 844826032";
   5. if (java.lang.Integer.reverse(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 844826032)
      goto AP
   6. lvar10 = {1463568412 ^ lvar10};
   7. if (lvar10 != 920850578)
      goto BD
      -> ConditionalJump[IF_ICMPNE] #J -> #AP
      -> Immediate #J -> #L
      -> ConditionalJump[IF_ICMPNE] #J -> #BD
      <- UnconditionalJump[GOTO] #DT -> #J
      <- UnconditionalJump[GOTO] #DZ -> #J
      <- UnconditionalJump[GOTO] #EB -> #J
      <- UnconditionalJump[GOTO] #EF -> #J
      <- UnconditionalJump[GOTO] #DX -> #J
      <- UnconditionalJump[GOTO] #ED -> #J
      <- UnconditionalJump[GOTO] #DV -> #J
===#Block BD(size=1, flags=0)===
   0. throw new java/lang/RuntimeException(new java/lang/StringBuilder("J --> L # Failed to match seed of type Immediate and value 920850578 and got ").append(lvar10).toString());
      <- ConditionalJump[IF_ICMPNE] #J -> #BD
===#Block AP(size=16, flags=0)===
   0. throw new java/lang/RuntimeException("Failed to proper vm");
   1. if (java.lang.Math.incrementExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 174471872)
      goto AP
   2. if (java.lang.Math.incrementExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {2030182280 ^ lvar10})
      goto AP
   3. lvar98 = "[Constant] 1632662628 -> 2030182280 predicate=408054764";
   4. _consume({1744682858 ^ lvar10});
   5. throw new java/io/IOException("Failed to proper vm");
   6. if (java.lang.Math.floorDiv(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 740656974) != 0)
      goto AP
   7. if (java.lang.Math.floorDiv(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 740656974) != {2056186139 ^ lvar10})
      goto AP
   8. lvar96 = "[Constant] 1658618615 -> 2056186139 predicate=408054764";
   9. _consume({1914135807 ^ lvar10});
   10. throw new java/lang/IllegalAccessException("Failed to proper vm");
   11. if (java.lang.Integer.reverse(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 844826032)
      goto AP
   12. if (java.lang.Integer.reverse(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1146406566 ^ lvar10})
      goto AP
   13. lvar94 = "[Constant] 1543941450 -> 1146406566 predicate=408054764";
   14. _consume({1985284243 ^ lvar10});
   15. throw new java/lang/RuntimeException("double");
      -> ConditionalJump[IF_ICMPNE] #AP -> #AP
      <- ConditionalJump[IF_ICMPNE] #AP -> #AP
      <- ConditionalJump[IF_ICMPNE] #J -> #AP
      <- ConditionalJump[IFNE] #AE -> #AP
      <- ConditionalJump[IF_ICMPNE] #G -> #AP
===#Block DU(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("DT --> J # Failed to match seed of type Exception Range [Ljavax/crypto/BadPaddingException;, Ljavax/crypto/IllegalBlockSizeException;, Ljavax/crypto/NoSuchPaddingException;, Ljava/security/InvalidKeyException;, Ljava/security/NoSuchAlgorithmException;] and value 1642027150");
      <- ConditionalJump[IF_ICMPNE] #DT -> #DU
===#Block AM(size=6, flags=0)===
   0. throw new java/lang/RuntimeException("Failed to proper vm");
   1. if (java.lang.Math.incrementExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 130827894)
      goto AM
   2. if (java.lang.Math.incrementExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {534608025 ^ lvar10})
      goto AM
   3. lvar150 = "[Constant] 799953346 -> 534608025 predicate=812853595";
   4. _consume({1482674342 ^ lvar10});
   5. throw new java/io/IOException("double");
      -> ConditionalJump[IF_ICMPNE] #AM -> #AM
      <- ConditionalJump[IF_ICMPNE] #AM -> #AM
      <- ConditionalJump[IF_ICMPNE] #I -> #AM
===#Block DC(size=1, flags=0)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.kdjdykfpmferaltc(lvar10)) {
      case -1841343318:
      	 goto	#DL
      case 692076544:
      	 goto	#DF
      case 1185675456:
      	 goto	#DH
      case 1190091466:
      	 goto	#DP
      case 1967285113:
      	 goto	#DJ
      case 1975679232:
      	 goto	#DD
      case 2064182195:
      	 goto	#DN
      default:
      	 goto	#DR
   }
      -> Switch[-1841343318] #DC -> #DL
      -> Switch[1185675456] #DC -> #DH
      -> Switch[1967285113] #DC -> #DJ
      -> Switch[1190091466] #DC -> #DP
      -> DefaultSwitch #DC -> #DR
      -> Switch[1975679232] #DC -> #DD
      -> Switch[692076544] #DC -> #DF
      -> Switch[2064182195] #DC -> #DN
      <- TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      <- TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      <- TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      <- TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      <- TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      <- TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
      <- TryCatch range: [C...H] -> DC ([Ljava/lang/IllegalStateException;])
===#Block DN(size=3, flags=10100)===
   0. lvar10 = {2083065225 ^ lvar10};
   1. if (lvar10 != 323490047)
      goto DO
   2. goto K
      -> ConditionalJump[IF_ICMPNE] #DN -> #DO
      -> UnconditionalJump[GOTO] #DN -> #K
      <- Switch[2064182195] #DC -> #DN
===#Block DO(size=1, flags=0)===
   0. throw new java/io/IOException("DN --> K # Failed to match seed of type Exception Range [Ljava/lang/IllegalStateException;] and value 323490047");
      <- ConditionalJump[IF_ICMPNE] #DN -> #DO
===#Block DF(size=3, flags=10100)===
   0. lvar10 = {375396607 ^ lvar10};
   1. if (lvar10 != 323490047)
      goto DG
   2. goto K
      -> ConditionalJump[IF_ICMPNE] #DF -> #DG
      -> UnconditionalJump[GOTO] #DF -> #K
      <- Switch[692076544] #DC -> #DF
===#Block DG(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("DF --> K # Failed to match seed of type Exception Range [Ljava/lang/IllegalStateException;] and value 323490047");
      <- ConditionalJump[IF_ICMPNE] #DF -> #DG
===#Block DD(size=3, flags=10100)===
   0. lvar10 = {502292447 ^ lvar10};
   1. if (lvar10 != 323490047)
      goto DE
   2. goto K
      -> UnconditionalJump[GOTO] #DD -> #K
      -> ConditionalJump[IF_ICMPNE] #DD -> #DE
      <- Switch[1975679232] #DC -> #DD
===#Block DE(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("DD --> K # Failed to match seed of type Exception Range [Ljava/lang/IllegalStateException;] and value 323490047");
      <- ConditionalJump[IF_ICMPNE] #DD -> #DE
===#Block DR(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("Error in hash");
      <- DefaultSwitch #DC -> #DR
===#Block DP(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1536555942);
   1. if (lvar10 != 323490047)
      goto DQ
   2. goto K
      -> ConditionalJump[IF_ICMPNE] #DP -> #DQ
      -> UnconditionalJump[GOTO] #DP -> #K
      <- Switch[1190091466] #DC -> #DP
===#Block DQ(size=1, flags=0)===
   0. throw new java/io/IOException("DP --> K # Failed to match seed of type Exception Range [Ljava/lang/IllegalStateException;] and value 323490047");
      <- ConditionalJump[IF_ICMPNE] #DP -> #DQ
===#Block DJ(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1038113936);
   1. if (lvar10 != 323490047)
      goto DK
   2. goto K
      -> UnconditionalJump[GOTO] #DJ -> #K
      -> ConditionalJump[IF_ICMPNE] #DJ -> #DK
      <- Switch[1967285113] #DC -> #DJ
===#Block DK(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("DJ --> K # Failed to match seed of type Exception Range [Ljava/lang/IllegalStateException;] and value 323490047");
      <- ConditionalJump[IF_ICMPNE] #DJ -> #DK
===#Block DH(size=3, flags=10100)===
   0. lvar10 = {463302631 ^ lvar10};
   1. if (lvar10 != 323490047)
      goto DI
   2. goto K
      -> ConditionalJump[IF_ICMPNE] #DH -> #DI
      -> UnconditionalJump[GOTO] #DH -> #K
      <- Switch[1185675456] #DC -> #DH
===#Block DI(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("DH --> K # Failed to match seed of type Exception Range [Ljava/lang/IllegalStateException;] and value 323490047");
      <- ConditionalJump[IF_ICMPNE] #DH -> #DI
===#Block DL(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1091566186);
   1. if (lvar10 != 323490047)
      goto DM
   2. goto K
      -> UnconditionalJump[GOTO] #DL -> #K
      -> ConditionalJump[IF_ICMPNE] #DL -> #DM
      <- Switch[-1841343318] #DC -> #DL
===#Block DM(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("DL --> K # Failed to match seed of type Exception Range [Ljava/lang/IllegalStateException;] and value 323490047");
      <- ConditionalJump[IF_ICMPNE] #DL -> #DM
===#Block K(size=7, flags=0)===
   0. lvar4 = catch();
   1. lvar6 = {323490043 ^ lvar10};
   2. lvar80 = "[Constant] 4 -> 323490043 predicate=323490047";
   3. lvar20 = "K : var expect: 2096829093";
   4. if (java.lang.Integer.rotateRight(1053075807, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 2096829093)
      goto AK
   5. lvar170 = "K -> Y : c-loc - uncond : 776308008";
   6. goto BI
      -> UnconditionalJump[GOTO] #K -> #BI
      -> ConditionalJump[IF_ICMPNE] #K -> #AK
      <- UnconditionalJump[GOTO] #DN -> #K
      <- UnconditionalJump[GOTO] #DJ -> #K
      <- UnconditionalJump[GOTO] #DL -> #K
      <- UnconditionalJump[GOTO] #DD -> #K
      <- UnconditionalJump[GOTO] #DF -> #K
      <- UnconditionalJump[GOTO] #DP -> #K
      <- UnconditionalJump[GOTO] #DH -> #K
===#Block BI(size=2, flags=10100)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) {
      case 89895846:
      	 goto	#BJ
      case 1599618100:
      	 goto	#AN
      case 1669565662:
      	 goto	#Y
      case 2071590414:
      	 goto	#BI
      default:
      	 goto	#AN
   }
   1. if (lvar10 != 776308008)
      goto BK
      -> DefaultSwitch #BI -> #AN
      -> Switch[89895846] #BI -> #BJ
      -> Switch[2071590414] #BI -> #BI
      -> Switch[1669565662] #BI -> #Y
      -> Switch[1599618100] #BI -> #AN
      -> Immediate #BI -> #BJ
      -> ConditionalJump[IF_ICMPNE] #BI -> #BK
      <- UnconditionalJump[GOTO] #K -> #BI
      <- Switch[2071590414] #BI -> #BI
===#Block BK(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("BI --> Y # Failed to match seed of type Unconditional and value 776308008");
      <- ConditionalJump[IF_ICMPNE] #BI -> #BK
===#Block BJ(size=2, flags=100)===
   0. lvar10 = {1024300503 ^ lvar10};
   1. goto Y
      -> UnconditionalJump[GOTO] #BJ -> #Y
      <- Switch[89895846] #BI -> #BJ
      <- Immediate #BI -> #BJ
===#Block Y(size=4, flags=0)===
   0. if (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10) == 161914808)
      goto X
   1. throw nullconst;
   2. lvar30 = "Y : var expect: 161914808";
   3. if (java.lang.StrictMath.abs(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 161914808)
      goto AO
      -> ConditionalJump[IF_ICMPEQ] #Y -> #X
      -> ConditionalJump[IF_ICMPNE] #Y -> #AO
      -> TryCatch range: [Y...X] -> EU ([Ljava/lang/RuntimeException;])
      <- Switch[1669565662] #BI -> #Y
      <- UnconditionalJump[GOTO] #BJ -> #Y
===#Block X(size=3, flags=0)===
   0. throw new java/lang/RuntimeException();
   1. lvar34 = "X : var expect: 1";
   2. if (java.lang.Integer.lowestOneBit(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1)
      goto AK
      -> TryCatch range: [Y...X] -> EU ([Ljava/lang/RuntimeException;])
      -> ConditionalJump[IF_ICMPNE] #X -> #AK
      <- ConditionalJump[IF_ICMPEQ] #Y -> #X
===#Block AK(size=11, flags=0)===
   0. throw new java/lang/RuntimeException("Failed to proper vm");
   1. if (java.lang.Integer.lowestOneBit(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1)
      goto AK
   2. if (java.lang.Integer.lowestOneBit(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1320643140 ^ lvar10})
      goto AK
   3. lvar164 = "[Constant] 799158104 -> 1320643140 predicate=1628783900";
   4. _consume({941867786 ^ lvar10});
   5. throw new java/io/IOException("Failed to proper vm");
   6. if (java.lang.Integer.rotateRight(1053075807, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 2096829093)
      goto AK
   7. if (java.lang.Integer.rotateRight(1053075807, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1992433651 ^ lvar10})
      goto AK
   8. lvar162 = "[Constant] 399989487 -> 1992433651 predicate=1628783900";
   9. _consume({880283429 ^ lvar10});
   10. throw new java/lang/RuntimeException("double");
      -> ConditionalJump[IF_ICMPNE] #AK -> #AK
      <- ConditionalJump[IF_ICMPNE] #X -> #AK
      <- ConditionalJump[IF_ICMPNE] #AK -> #AK
      <- DefaultSwitch #CW -> #AK
      <- ConditionalJump[IF_ICMPNE] #K -> #AK
      <- Switch[1361632897] #CW -> #AK
===#Block EU(size=1, flags=0)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.kdjdykfpmferaltc(lvar10)) {
      case -1645243488:
      	 goto	#EX
      case 1915496769:
      	 goto	#EV
      default:
      	 goto	#EZ
   }
      -> Switch[1915496769] #EU -> #EV
      -> DefaultSwitch #EU -> #EZ
      -> Switch[-1645243488] #EU -> #EX
      <- TryCatch range: [Y...X] -> EU ([Ljava/lang/RuntimeException;])
      <- TryCatch range: [Y...X] -> EU ([Ljava/lang/RuntimeException;])
===#Block EX(size=3, flags=10100)===
   0. lvar10 = {1767409931 ^ lvar10};
   1. if (lvar10 != 2061859711)
      goto EY
   2. goto Z
      -> UnconditionalJump[GOTO] #EX -> #Z
      -> ConditionalJump[IF_ICMPNE] #EX -> #EY
      <- Switch[-1645243488] #EU -> #EX
===#Block EY(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("EX --> Z # Failed to match seed of type Exception Range [Ljava/lang/RuntimeException;] and value 2061859711");
      <- ConditionalJump[IF_ICMPNE] #EX -> #EY
===#Block EZ(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("Error in hash");
      <- DefaultSwitch #EU -> #EZ
===#Block EV(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1419837015);
   1. if (lvar10 != 2061859711)
      goto EW
   2. goto Z
      -> UnconditionalJump[GOTO] #EV -> #Z
      -> ConditionalJump[IF_ICMPNE] #EV -> #EW
      <- Switch[1915496769] #EU -> #EV
===#Block EW(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("EV --> Z # Failed to match seed of type Exception Range [Ljava/lang/RuntimeException;] and value 2061859711");
      <- ConditionalJump[IF_ICMPNE] #EV -> #EW
===#Block Z(size=5, flags=0)===
   0. _consume(catch());
   1. lvar16 = "Z : var expect: 1";
   2. if (java.lang.Integer.signum(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1)
      goto AJ
   3. lvar186 = "Z -> L : c-loc - uncond : 920850578";
   4. goto CD
      -> UnconditionalJump[GOTO] #Z -> #CD
      -> ConditionalJump[IF_ICMPNE] #Z -> #AJ
      <- UnconditionalJump[GOTO] #EV -> #Z
      <- UnconditionalJump[GOTO] #EX -> #Z
===#Block CD(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1275489261);
   1. if (lvar10 != 920850578)
      goto CE
   2. goto L
      -> ConditionalJump[IF_ICMPNE] #CD -> #CE
      -> UnconditionalJump[GOTO] #CD -> #L
      <- UnconditionalJump[GOTO] #Z -> #CD
===#Block L(size=6, flags=0)===
   0. if (dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.data[{920850576 ^ lvar10}] == lvar6)
      goto CM
   1. lvar106 = "[Constant] 2 -> 920850576 predicate=920850578";
   2. lvar68 = "L : var expect: 173524729";
   3. if (java.lang.Math.min(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 400518036) != 173524729)
      goto AR
   4. lvar10 = {2036461647 ^ lvar10};
   5. if (lvar10 != 1333977309)
      goto BE
      -> ConditionalJump[IF_ICMPEQ] #L -> #CM
      -> ConditionalJump[IF_ICMPNE] #L -> #AR
      -> Immediate #L -> #M
      -> ConditionalJump[IF_ICMPNE] #L -> #BE
      <- Immediate #J -> #L
      <- UnconditionalJump[GOTO] #CD -> #L
===#Block BE(size=1, flags=0)===
   0. throw new java/lang/RuntimeException(new java/lang/StringBuilder("L --> M # Failed to match seed of type Immediate and value 1333977309 and got ").append(lvar10).toString());
      <- ConditionalJump[IF_ICMPNE] #L -> #BE
===#Block M(size=5, flags=0)===
   0. lvar3 = new java.lang.IllegalArgumentException;
   1. _consume(lvar3.<init>(dynamic_invoke<java.lang.String>(java.lang.invoke.StringConcatFactory.makeConcatWithConstants("Failed test! Stage: ", lvar6))));
   2. throw lvar3;
   3. lvar70 = "M : var expect: -1";
   4. if (java.lang.Character.digit(1730944408, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != -1)
      goto AY
      -> ConditionalJump[IF_ICMPNE] #M -> #AY
      <- Immediate #L -> #M
===#Block AY(size=6, flags=0)===
   0. throw new java/lang/RuntimeException("Failed to proper vm");
   1. if (java.lang.Character.digit(1730944408, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != -1)
      goto AY
   2. if (java.lang.Character.digit(1730944408, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1414932870 ^ lvar10})
      goto AY
   3. lvar90 = "[Constant] 118288580 -> 1414932870 predicate=1398462786";
   4. _consume({1129199961 ^ lvar10});
   5. throw new java/io/IOException("double");
      -> ConditionalJump[IF_ICMPNE] #AY -> #AY
      <- ConditionalJump[IF_ICMPNE] #M -> #AY
      <- ConditionalJump[IF_ICMPNE] #AY -> #AY
===#Block AR(size=11, flags=0)===
   0. throw new java/lang/IllegalAccessException("Failed to proper vm");
   1. if (java.lang.Math.min(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 400518036) != 173524729)
      goto AR
   2. if (java.lang.Math.min(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 400518036) != {1447666497 ^ lvar10})
      goto AR
   3. lvar116 = "[Constant] 1788260121 -> 1447666497 predicate=1021250648";
   4. _consume({1374273480 ^ lvar10});
   5. throw new java/lang/RuntimeException("Failed to proper vm");
   6. if (java.lang.StrictMath.max(1707464269, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1707464269)
      goto AR
   7. if (java.lang.StrictMath.max(1707464269, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1786344253 ^ lvar10})
      goto AR
   8. lvar114 = "[Constant] 1453752165 -> 1786344253 predicate=1021250648";
   9. _consume({185204503 ^ lvar10});
   10. throw new java/lang/RuntimeException("double");
      -> ConditionalJump[IF_ICMPNE] #AR -> #AR
      <- ConditionalJump[IF_ICMPNE] #R -> #AR
      <- ConditionalJump[IF_ICMPNE] #L -> #AR
      <- ConditionalJump[IF_ICMPNE] #AR -> #AR
===#Block CM(size=3, flags=10100)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) {
      case 173524729:
      	 goto	#CN
      case 859283310:
      	 goto	#CM
      case 1392462802:
      	 goto	#Q
      case 1843582792:
      	 goto	#AW
      default:
      	 goto	#AW
   }
   1. lvar194 = "L -> Q : c-loc - cond : 1143532984";
   2. if (lvar10 != 1143532984)
      goto CO
      -> Switch[173524729] #CM -> #CN
      -> Immediate #CM -> #CN
      -> ConditionalJump[IF_ICMPNE] #CM -> #CO
      -> DefaultSwitch #CM -> #AW
      -> Switch[1843582792] #CM -> #AW
      -> Switch[859283310] #CM -> #CM
      -> Switch[1392462802] #CM -> #Q
      <- ConditionalJump[IF_ICMPEQ] #L -> #CM
      <- Switch[859283310] #CM -> #CM
===#Block AW(size=6, flags=0)===
   0. throw new java/lang/IllegalAccessException("Failed to proper vm");
   1. if (java.lang.Integer.compareUnsigned(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 595440337) != -1)
      goto AW
   2. if (java.lang.Integer.compareUnsigned(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 595440337) != {694575480 ^ lvar10})
      goto AW
   3. lvar88 = "[Constant] 341965178 -> 694575480 predicate=1023907842";
   4. _consume({608760118 ^ lvar10});
   5. throw new java/io/IOException("double");
      -> ConditionalJump[IF_ICMPNE] #AW -> #AW
      <- ConditionalJump[IF_ICMPNE] #AW -> #AW
      <- ConditionalJump[IF_ICMPNE] #S -> #AW
      <- DefaultSwitch #CM -> #AW
      <- Switch[1843582792] #CM -> #AW
===#Block CO(size=1, flags=0)===
   0. throw new java/io/IOException("CM --> Q # Failed to match seed of type Conditional and value 1143532984");
      <- ConditionalJump[IF_ICMPNE] #CM -> #CO
===#Block CN(size=2, flags=100)===
   0. lvar10 = {1925971242 ^ lvar10};
   1. goto Q
      -> UnconditionalJump[GOTO] #CN -> #Q
      <- Switch[173524729] #CM -> #CN
      <- Immediate #CM -> #CN
===#Block Q(size=5, flags=0)===
   0. if (java.lang.Integer.numberOfLeadingZeros(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) == 5)
      goto CP
   1. lvar12 = "Q : var expect: 68094140";
   2. if (java.lang.Integer.min(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 1105305961) != 68094140)
      goto P
   3. lvar182 = "Q -> V : c-loc - uncond : 454175997";
   4. goto BY
      -> UnconditionalJump[GOTO] #Q -> #BY
      -> ConditionalJump[IF_ICMPEQ] #Q -> #CP
      -> ConditionalJump[IF_ICMPNE] #Q -> #P
      <- UnconditionalJump[GOTO] #CN -> #Q
      <- Switch[1392462802] #CM -> #Q
===#Block CP(size=3, flags=10100)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) {
      case 68094140:
      	 goto	#CQ
      case 351568123:
      	 goto	#N
      case 1052763495:
      	 goto	#AJ
      case 1169167000:
      	 goto	#CP
      default:
      	 goto	#AJ
   }
   1. lvar196 = "Q -> N : c-loc - cond : 1943031651";
   2. if (lvar10 != 1943031651)
      goto CR
      -> Switch[1052763495] #CP -> #AJ
      -> Switch[68094140] #CP -> #CQ
      -> Immediate #CP -> #CQ
      -> DefaultSwitch #CP -> #AJ
      -> Switch[1169167000] #CP -> #CP
      -> ConditionalJump[IF_ICMPNE] #CP -> #CR
      -> Switch[351568123] #CP -> #N
      <- ConditionalJump[IF_ICMPEQ] #Q -> #CP
      <- Switch[1169167000] #CP -> #CP
===#Block CR(size=1, flags=0)===
   0. throw new java/io/IOException("CP --> N # Failed to match seed of type Conditional and value 1943031651");
      <- ConditionalJump[IF_ICMPNE] #CP -> #CR
===#Block CQ(size=2, flags=100)===
   0. lvar10 = {939041499 ^ lvar10};
   1. goto N
      -> UnconditionalJump[GOTO] #CQ -> #N
      <- Switch[68094140] #CP -> #CQ
      <- Immediate #CP -> #CQ
===#Block N(size=3, flags=0)===
   0. return;
   1. lvar32 = "N : var expect: 314";
   2. if (java.lang.StrictMath.floorDiv(2061171791, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 314)
      goto AJ
      -> ConditionalJump[IF_ICMPNE] #N -> #AJ
      <- UnconditionalJump[GOTO] #CQ -> #N
      <- Switch[351568123] #CP -> #N
===#Block AJ(size=26, flags=0)===
   0. throw new java/lang/RuntimeException("Failed to proper vm");
   1. if (java.lang.StrictMath.floorMod(6909346245057239445L, 1346717428) != 672834169)
      goto AJ
   2. if (java.lang.StrictMath.floorMod(6909346245057239445L, 1346717428) != {1846725310 ^ lvar10})
      goto AJ
   3. lvar158 = "[Constant] 655625094 -> 1846725310 predicate=1225179448";
   4. _consume({1218594415 ^ lvar10});
   5. throw new java/io/IOException("Failed to proper vm");
   6. if (java.lang.Math.floorDiv(304399280, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1)
      goto AJ
   7. if (java.lang.Math.floorDiv(304399280, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {433705380 ^ lvar10})
      goto AJ
   8. lvar156 = "[Constant] 1356796060 -> 433705380 predicate=1225179448";
   9. _consume({1178814505 ^ lvar10});
   10. throw new java/lang/RuntimeException("Failed to proper vm");
   11. if (java.lang.StrictMath.floorDiv(2061171791, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 314)
      goto AJ
   12. if (java.lang.StrictMath.floorDiv(2061171791, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {334178431 ^ lvar10})
      goto AJ
   13. lvar154 = "[Constant] 1525541191 -> 334178431 predicate=1225179448";
   14. _consume({1912106380 ^ lvar10});
   15. throw new java/lang/RuntimeException("Failed to proper vm");
   16. if (java.lang.Integer.sum(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 2092181537) != -2115371073)
      goto AJ
   17. if (java.lang.Integer.sum(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 2092181537) != {72919272 ^ lvar10})
      goto AJ
   18. lvar160 = "[Constant] 1298033104 -> 72919272 predicate=1225179448";
   19. _consume({114206829 ^ lvar10});
   20. throw new java/lang/RuntimeException("Failed to proper vm");
   21. if (java.lang.Integer.signum(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1)
      goto AJ
   22. if (java.lang.Integer.signum(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {161741336 ^ lvar10})
      goto AJ
   23. lvar152 = "[Constant] 1084570400 -> 161741336 predicate=1225179448";
   24. _consume({1314252186 ^ lvar10});
   25. throw new java/io/IOException("double");
      -> ConditionalJump[IF_ICMPNE] #AJ -> #AJ
      <- ConditionalJump[IF_ICMPNE] #AA -> #AJ
      <- ConditionalJump[IF_ICMPNE] #N -> #AJ
      <- Switch[1052763495] #CP -> #AJ
      <- ConditionalJump[IF_ICMPNE] #AJ -> #AJ
      <- DefaultSwitch #CP -> #AJ
      <- ConditionalJump[IF_ICMPNE] #AF -> #AJ
      <- ConditionalJump[IF_ICMPNE] #Z -> #AJ
      <- ConditionalJump[IF_ICMPNE] #AD -> #AJ
===#Block BY(size=3, flags=10100)===
   0. lvar10 = {1597686085 ^ lvar10};
   1. if (lvar10 != 454175997)
      goto BZ
   2. goto V
      -> UnconditionalJump[GOTO] #BY -> #V
      -> ConditionalJump[IF_ICMPNE] #BY -> #BZ
      <- UnconditionalJump[GOTO] #Q -> #BY
===#Block BZ(size=1, flags=0)===
   0. throw new java/lang/RuntimeException("BY --> V # Failed to match seed of type Unconditional and value 454175997");
      <- ConditionalJump[IF_ICMPNE] #BY -> #BZ
===#Block V(size=4, flags=0)===
   0. if (pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10) == 74656824)
      goto U
   1. throw nullconst;
   2. lvar60 = "V : var expect: 23";
   3. if (java.lang.StrictMath.floorDiv(1751083165, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 23)
      goto AV
      -> ConditionalJump[IF_ICMPNE] #V -> #AV
      -> ConditionalJump[IF_ICMPEQ] #V -> #U
      -> TryCatch range: [V...U] -> EO ([Ljava/lang/RuntimeException;])
      <- UnconditionalJump[GOTO] #BY -> #V
===#Block U(size=3, flags=0)===
   0. throw new java/lang/RuntimeException();
   1. lvar44 = "U : var expect: 118257104";
   2. if (java.lang.StrictMath.floorMod(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 218158239) != 118257104)
      goto AO
      -> ConditionalJump[IF_ICMPNE] #U -> #AO
      -> TryCatch range: [V...U] -> EO ([Ljava/lang/RuntimeException;])
      <- ConditionalJump[IF_ICMPEQ] #V -> #U
===#Block EO(size=1, flags=0)===
   0. switch (pslmxlxlobvpuknt.ycljuptvbdeihrjh.kdjdykfpmferaltc(lvar10)) {
      case -661559320:
      	 goto	#EP
      case -481556704:
      	 goto	#ER
      default:
      	 goto	#ET
   }
      -> Switch[-661559320] #EO -> #EP
      -> Switch[-481556704] #EO -> #ER
      -> DefaultSwitch #EO -> #ET
      <- TryCatch range: [V...U] -> EO ([Ljava/lang/RuntimeException;])
      <- TryCatch range: [V...U] -> EO ([Ljava/lang/RuntimeException;])
===#Block ET(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("Error in hash");
      <- DefaultSwitch #EO -> #ET
===#Block ER(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1516886624);
   1. if (lvar10 != 1174428292)
      goto ES
   2. goto W
      -> UnconditionalJump[GOTO] #ER -> #W
      -> ConditionalJump[IF_ICMPNE] #ER -> #ES
      <- Switch[-481556704] #EO -> #ER
===#Block ES(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("ER --> W # Failed to match seed of type Exception Range [Ljava/lang/RuntimeException;] and value 1174428292");
      <- ConditionalJump[IF_ICMPNE] #ER -> #ES
===#Block EP(size=3, flags=10100)===
   0. lvar10 = dev.skidfuscator.testclasses.exclusion.ObfuscatedTestClass.gvprfwvilxtnyjar(lvar10, 1561491065);
   1. if (lvar10 != 1174428292)
      goto EQ
   2. goto W
      -> ConditionalJump[IF_ICMPNE] #EP -> #EQ
      -> UnconditionalJump[GOTO] #EP -> #W
      <- Switch[-661559320] #EO -> #EP
===#Block W(size=5, flags=0)===
   0. _consume(catch());
   1. lvar42 = "W : var expect: -199414816";
   2. if (java.lang.Integer.rotateRight(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 1529987227) != -199414816)
      goto AL
   3. lvar188 = "W -> P : c-loc - uncond : 825727288";
   4. goto CF
      -> UnconditionalJump[GOTO] #W -> #CF
      -> ConditionalJump[IF_ICMPNE] #W -> #AL
      <- UnconditionalJump[GOTO] #ER -> #W
      <- UnconditionalJump[GOTO] #EP -> #W
===#Block AL(size=11, flags=0)===
   0. throw new java/io/IOException("Failed to proper vm");
   1. if (java.lang.Integer.rotateRight(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 1529987227) != -199414816)
      goto AL
   2. if (java.lang.Integer.rotateRight(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 1529987227) != {2144908761 ^ lvar10})
      goto AL
   3. lvar108 = "[Constant] 1203066869 -> 2144908761 predicate=946725420";
   4. _consume({1316129242 ^ lvar10});
   5. throw new java/lang/IllegalAccessException("Failed to proper vm");
   6. if (java.lang.Math.subtractExact(1517175641, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 1307126627)
      goto AL
   7. if (java.lang.Math.subtractExact(1517175641, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {326198746 ^ lvar10})
      goto AL
   8. lvar110 = "[Constant] 723290102 -> 326198746 predicate=946725420";
   9. _consume({1375778798 ^ lvar10});
   10. throw new java/lang/RuntimeException("double");
      -> ConditionalJump[IF_ICMPNE] #AL -> #AL
      <- ConditionalJump[IF_ICMPNE] #C -> #AL
      <- ConditionalJump[IF_ICMPNE] #AL -> #AL
      <- DefaultSwitch #BT -> #AL
      <- Switch[1824729686] #BT -> #AL
      <- ConditionalJump[IF_ICMPNE] #W -> #AL
===#Block CF(size=3, flags=10100)===
   0. lvar10 = {2000143292 ^ lvar10};
   1. if (lvar10 != 825727288)
      goto CG
   2. goto P
      -> ConditionalJump[IF_ICMPNE] #CF -> #CG
      -> UnconditionalJump[GOTO] #CF -> #P
      <- UnconditionalJump[GOTO] #W -> #CF
===#Block P(size=23, flags=0)===
   0. throw new java/lang/RuntimeException("Failed to proper vm");
   1. if (java.lang.Character.digit(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 1157052188) != -1)
      goto P
   2. if (java.lang.Character.digit(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 1157052188) != {2087345862 ^ lvar10})
      goto P
   3. lvar132 = "[Constant] 1297991678 -> 2087345862 predicate=825727288";
   4. _consume({233399223 ^ lvar10});
   5. throw new java/lang/RuntimeException("Failed to proper vm");
   6. if (java.lang.Character.getNumericValue(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != -1)
      goto P
   7. if (java.lang.Character.getNumericValue(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1431189994 ^ lvar10})
      goto P
   8. lvar126 = "[Constant] 1685692626 -> 1431189994 predicate=825727288";
   9. _consume({2051377248 ^ lvar10});
   10. throw new java/lang/IllegalAccessException("Failed to proper vm");
   11. if (java.lang.Math.min(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 1127856956) != 21977833)
      goto P
   12. if (java.lang.Math.min(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 1127856956) != {1630057163 ^ lvar10})
      goto P
   13. lvar128 = "[Constant] 1344220147 -> 1630057163 predicate=825727288";
   14. _consume({370507441 ^ lvar10});
   15. throw new java/lang/IllegalAccessException("Failed to proper vm");
   16. if (java.lang.Integer.min(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 1105305961) != 68094140)
      goto P
   17. if (java.lang.Integer.min(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 1105305961) != {201406604 ^ lvar10})
      goto P
   18. lvar130 = "[Constant] 1026990516 -> 201406604 predicate=825727288";
   19. _consume({1445331241 ^ lvar10});
   20. throw new java/io/IOException();
   21. lvar76 = "P : var expect: 257657323";
   22. if (java.lang.Integer.hashCode(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 257657323)
      goto BA
      -> ConditionalJump[IF_ICMPNE] #P -> #BA
      -> ConditionalJump[IF_ICMPNE] #P -> #P
      <- ConditionalJump[IF_ICMPNE] #P -> #P
      <- Switch[262085016] #BN -> #P
      <- UnconditionalJump[GOTO] #BO -> #P
      <- ConditionalJump[IF_ICMPNE] #F -> #P
      <- UnconditionalJump[GOTO] #CF -> #P
      <- ConditionalJump[IF_ICMPNE] #Q -> #P
      <- ConditionalJump[IF_ICMPNE] #T -> #P
      <- ConditionalJump[IF_ICMPNE] #A -> #P
===#Block BA(size=6, flags=0)===
   0. throw new java/io/IOException("Failed to proper vm");
   1. if (java.lang.Integer.hashCode(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 257657323)
      goto BA
   2. if (java.lang.Integer.hashCode(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {2139306365 ^ lvar10})
      goto BA
   3. lvar112 = "[Constant] 2133386653 -> 2139306365 predicate=11263200";
   4. _consume({1300692355 ^ lvar10});
   5. throw new java/lang/RuntimeException("double");
      -> ConditionalJump[IF_ICMPNE] #BA -> #BA
      <- ConditionalJump[IF_ICMPNE] #BA -> #BA
      <- ConditionalJump[IF_ICMPNE] #P -> #BA
===#Block CG(size=1, flags=0)===
   0. throw new java/io/IOException("CF --> P # Failed to match seed of type Unconditional and value 825727288");
      <- ConditionalJump[IF_ICMPNE] #CF -> #CG
===#Block EQ(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("EP --> W # Failed to match seed of type Exception Range [Ljava/lang/RuntimeException;] and value 1174428292");
      <- ConditionalJump[IF_ICMPNE] #EP -> #EQ
===#Block AO(size=11, flags=0)===
   0. throw new java/lang/RuntimeException("Failed to proper vm");
   1. if (java.lang.StrictMath.floorMod(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 218158239) != 118257104)
      goto AO
   2. if (java.lang.StrictMath.floorMod(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10), 218158239) != {1846145018 ^ lvar10})
      goto AO
   3. lvar136 = "[Constant] 1748173870 -> 1846145018 predicate=104524756";
   4. _consume({1422396881 ^ lvar10});
   5. throw new java/lang/IllegalAccessException("Failed to proper vm");
   6. if (java.lang.StrictMath.abs(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 161914808)
      goto AO
   7. if (java.lang.StrictMath.abs(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {1048097773 ^ lvar10})
      goto AO
   8. lvar138 = "[Constant] 943872057 -> 1048097773 predicate=104524756";
   9. _consume({1106757231 ^ lvar10});
   10. throw new java/lang/RuntimeException("double");
      -> ConditionalJump[IF_ICMPNE] #AO -> #AO
      <- ConditionalJump[IF_ICMPNE] #Y -> #AO
      <- ConditionalJump[IF_ICMPNE] #U -> #AO
      <- ConditionalJump[IF_ICMPNE] #AO -> #AO
      <- DefaultSwitch #CH -> #AO
      <- Switch[1956248668] #CH -> #AO
===#Block AV(size=6, flags=0)===
   0. throw new java/lang/IllegalAccessException("Failed to proper vm");
   1. if (java.lang.StrictMath.floorDiv(1751083165, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 23)
      goto AV
   2. if (java.lang.StrictMath.floorDiv(1751083165, pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {575435872 ^ lvar10})
      goto AV
   3. lvar140 = "[Constant] 737862807 -> 575435872 predicate=162959607";
   4. _consume({2037543923 ^ lvar10});
   5. throw new java/lang/RuntimeException("double");
      -> ConditionalJump[IF_ICMPNE] #AV -> #AV
      <- ConditionalJump[IF_ICMPNE] #V -> #AV
      <- Switch[158492781] #CA -> #AV
      <- DefaultSwitch #CA -> #AV
      <- ConditionalJump[IF_ICMPNE] #AV -> #AV
===#Block CE(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException("CD --> L # Failed to match seed of type Unconditional and value 920850578");
      <- ConditionalJump[IF_ICMPNE] #CD -> #CE
===#Block AN(size=6, flags=0)===
   0. throw new java/lang/RuntimeException("Failed to proper vm");
   1. if (java.lang.Math.absExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != 26034181)
      goto AN
   2. if (java.lang.Math.absExact(pslmxlxlobvpuknt.ycljuptvbdeihrjh.rovephdzuhsjqppr(lvar10)) != {776031309 ^ lvar10})
      goto AN
   3. lvar86 = "[Constant] 1959685424 -> 776031309 predicate=1519329661";
   4. _consume({284603248 ^ lvar10});
   5. throw new java/lang/RuntimeException("double");
      -> ConditionalJump[IF_ICMPNE] #AN -> #AN
      <- DefaultSwitch #BI -> #AN
      <- ConditionalJump[IF_ICMPNE] #AH -> #AN
      <- ConditionalJump[IF_ICMPNE] #AN -> #AN
      <- Switch[1599618100] #BI -> #AN
===#Block BG(size=1, flags=0)===
   0. throw new java/lang/IllegalAccessException(new java/lang/StringBuilder("A --> B # Failed to match seed of type Immediate and value 1573158791 and got ").append(lvar10).toString());
      <- ConditionalJump[IF_ICMPNE] #A -> #BG
